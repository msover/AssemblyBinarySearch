     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 010000000200000003-         a dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
    13 00000009 000000040000000500-
    13 00000012 000006000000070000-
    13 0000001B 000800000009000000-
    13 00000024 0A000000           
    14                                      len equ ($ - a) / 4
    15 00000028 0A000000                    src dd 10
    16                                      
    17 0000002C FFFFFFFF                    result dd -1
    18 00000030 00000000                    left dd 0
    19 00000034 09000000                    right dd len - 1
    20 00000038 <res 00000004>              mid resd 1
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      checkRepetitive:
    24 00000000 A1[30000000]                    mov eax, [left]
    25 00000005 3B05[34000000]                  cmp eax, [right]
    26 0000000B E9C9000000                      jmp resumeCheckRepetitive
    27                                      getMid:
    28 00000010 BA00000000                      mov edx, 0
    29 00000015 A1[30000000]                    mov eax, [left]
    30 0000001A 0305[34000000]                  add eax, [right]
    31 00000020 BB02000000                      mov ebx, 2
    32 00000025 F7F3                            div ebx
    33 00000027 A3[38000000]                    mov [mid], eax
    34 0000002C B800000000                      mov eax, 0
    35 00000031 BB00000000                      mov ebx, 0
    36 00000036 BA00000000                      mov edx, 0
    37 0000003B E990000000                      jmp resumeGetMid
    38                                      pushRes:
    39 00000040 A1[38000000]                    mov eax, [mid]
    40 00000045 A3[2C000000]                    mov [result], eax
    41 0000004A B800000000                      mov eax, 0
    42 0000004F E987000000                      jmp endOfBinary
    43                                      checkEquality:
    44 00000054 BB[00000000]                    mov ebx, a
    45 00000059 8B0D[38000000]                  mov ecx, [mid]
    46 0000005F 8B048B                          mov eax, [ebx + ecx * 4]
    47 00000062 3B05[28000000]                  cmp eax, [src]
    48 00000068 B800000000                      mov eax, 0
    49 0000006D BB00000000                      mov ebx, 0
    50 00000072 B900000000                      mov ecx, 0
    51 00000077 74C7                            jz pushRes
    52 00000079 EB57                            jmp resumeCheckEquality
    53                                      isElemLower:
    54 0000007B B901000000                      mov ecx, 1
    55 00000080 A1[38000000]                    mov eax, [mid]
    56 00000085 40                              inc eax
    57 00000086 A3[30000000]                    mov [left], eax
    58 0000008B B800000000                      mov eax, 0
    59 00000090 B900000000                      mov ecx, 0
    60 00000095 EB3D                            jmp resumeCheckSide
    61                                      isElemGreater:
    62 00000097 B902000000                      mov ecx, 2
    63 0000009C A1[38000000]                    mov eax, [mid]
    64 000000A1 48                              dec eax
    65 000000A2 A3[34000000]                    mov [right], eax
    66 000000A7 B800000000                      mov eax, 0
    67 000000AC B900000000                      mov ecx, 0
    68 000000B1 EB21                            jmp resumeCheckSide
    69                                      checkSide:
    70 000000B3 BB[00000000]                    mov ebx, a
    71 000000B8 8B0D[38000000]                  mov ecx, [mid]
    72 000000BE 8B048B                          mov eax, [ebx + ecx * 4]
    73 000000C1 3B05[28000000]                  cmp eax, [src]
    74                                          
    75 000000C7 7CB2                            jl isElemLower
    76 000000C9 EBCC                            jmp isElemGreater
    77                                      start:
    78                                          repetitive:
    79 000000CB E940FFFFFF                          jmp getMid
    80                                              resumeGetMid:
    81                                              
    82 000000D0 EB82                                jmp checkEquality
    83                                              resumeCheckEquality:
    84                                              
    85 000000D2 EBDF                                jmp checkSide
    86                                              resumeCheckSide:
    87                                              
    88 000000D4 E927FFFFFF                          jmp checkRepetitive
    89                                              resumeCheckRepetitive:
    90                                              
    91 000000D9 76F0                                jbe repetitive
    92                                          endOfBinary:
    93 000000DB A1[2C000000]                        mov eax, [result]
    94 000000E0 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    95 000000E2 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 010000000200000003-         a dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
    13 00000009 000000040000000500-
    13 00000012 000006000000070000-
    13 0000001B 000800000009000000-
    13 00000024 0A000000           
    14                                      len equ ($ - a) / 4
    15 00000028 0A000000                    src dd 10
    16                                      
    17 0000002C FFFFFFFF                    result dd -1
    18 00000030 00000000                    left dd 0
    19 00000034 09000000                    right dd len - 1
    20 00000038 <res 00000004>              mid resd 1
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      checkRepetitive:
    24 00000000 A1[30000000]                    mov eax, [left]
    25 00000005 3B05[34000000]                  cmp eax, [right]
    26 0000000B 0F86C0000000                    jbe repetitive
    27 00000011 E9C9000000                      jmp endOfBinary
    28                                      getMid:
    29 00000016 BA00000000                      mov edx, 0
    30 0000001B A1[30000000]                    mov eax, [left]
    31 00000020 0305[34000000]                  add eax, [right]
    32 00000026 BB02000000                      mov ebx, 2
    33 0000002B F7F3                            div ebx
    34 0000002D A3[38000000]                    mov [mid], eax
    35 00000032 B800000000                      mov eax, 0
    36 00000037 BB00000000                      mov ebx, 0
    37 0000003C BA00000000                      mov edx, 0
    38 00000041 E990000000                      jmp resumeGetMid
    39                                      pushRes:
    40 00000046 A1[38000000]                    mov eax, [mid]
    41 0000004B A3[2C000000]                    mov [result], eax
    42 00000050 B800000000                      mov eax, 0
    43 00000055 E985000000                      jmp endOfBinary
    44                                      checkEquality:
    45 0000005A BB[00000000]                    mov ebx, a
    46 0000005F 8B0D[38000000]                  mov ecx, [mid]
    47 00000065 8B048B                          mov eax, [ebx + ecx * 4]
    48 00000068 3B05[28000000]                  cmp eax, [src]
    49 0000006E B800000000                      mov eax, 0
    50 00000073 BB00000000                      mov ebx, 0
    51 00000078 B900000000                      mov ecx, 0
    52 0000007D 74C7                            jz pushRes
    53 0000007F EB57                            jmp resumeCheckEquality
    54                                      isElemLower:
    55 00000081 B901000000                      mov ecx, 1
    56 00000086 A1[38000000]                    mov eax, [mid]
    57 0000008B 40                              inc eax
    58 0000008C A3[30000000]                    mov [left], eax
    59 00000091 B800000000                      mov eax, 0
    60 00000096 B900000000                      mov ecx, 0
    61 0000009B EB3D                            jmp resumeCheckSide
    62                                      isElemGreater:
    63 0000009D B902000000                      mov ecx, 2
    64 000000A2 A1[38000000]                    mov eax, [mid]
    65 000000A7 48                              dec eax
    66 000000A8 A3[34000000]                    mov [right], eax
    67 000000AD B800000000                      mov eax, 0
    68 000000B2 B900000000                      mov ecx, 0
    69 000000B7 EB21                            jmp resumeCheckSide
    70                                      checkSide:
    71 000000B9 BB[00000000]                    mov ebx, a
    72 000000BE 8B0D[38000000]                  mov ecx, [mid]
    73 000000C4 8B048B                          mov eax, [ebx + ecx * 4]
    74 000000C7 3B05[28000000]                  cmp eax, [src]
    75                                          
    76 000000CD 7CB2                            jl isElemLower
    77 000000CF EBCC                            jmp isElemGreater
    78                                      start:
    79                                          repetitive:
    80 000000D1 E940FFFFFF                          jmp getMid
    81                                              resumeGetMid:
    82                                              
    83 000000D6 EB82                                jmp checkEquality
    84                                              resumeCheckEquality:
    85                                              
    86 000000D8 EBDF                                jmp checkSide
    87                                              resumeCheckSide:
    88                                              
    89 000000DA E921FFFFFF                          jmp checkRepetitive
    90                                          endOfBinary:
    91 000000DF A1[2C000000]                        mov eax, [result]
    92 000000E4 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    93 000000E6 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
